name: ?f"Variant calls {wildcards.event}"

datasets:
  ?for group, path in zip(params.groups, params.coding_calls):
    ?f"{group}-coding":
      path: ?path
      separator: "\t"
  ?for group, path in zip(params.groups, params.noncoding_calls):
    ?f"{group}-noncoding":
      path: ?path
      separator: "\t"

views:
  ?for group in params.groups:
    ?f"{group}-coding":
      desc: ?f"Variants in coding regions.\n{config['calling']['fdr-control']['events'][wildcards.event]['desc']}"
      dataset: ?f"{group}-coding"
      render-table:
        symbol:
          link-to-url: https://www.ensembl.org/Multi/Search/Results?q={feature}
        consequence:
          plot:
            heatmap:
              color-scheme: category20
              scale: ordinal
        impact:
          plot:
            heatmap:
              scale: ordinal
              domain:
                - HIGH
                - MODERATE
                - LOW
                - MODIFIER
              range:
                - "#ec0000"
                - "#ec5300"
                - "#ec9b00"
                - "#ecca00"

        ?for sample in ["normal", "tumor"]:
          '[?f"{sample}: observations"]':
            custom-plot:
              data: |
                function(value) {
                  var regex = /([0-9]+)(N|E|B|P|S|V|n|e|b|p|s|v)/g;
                  var effects = {
                    "N": "None",
                    "E": "Equal",
                    "B": "Barely",
                    "P": "Positive",
                    "S": "Strong",
                    "V": "Very Strong"
                  }
                  var observations = [];
                  while ((result = regex.exec(value)) != null) {
                    effect = effects[result[2].toUpperCase()]
                    count = parseFloat(result[1])
                    var quality = "Low";
                    if (result[2] == result[2].toUpperCase()) {
                        quality = "High";
                    }
                    observations.push({
                      "effect": effect,
                      "count": count,
                      "quality": quality
                    })
                  }
                  return observations
                }
              spec: |
                {
                  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
                  "mark": {
                    "type": "bar",
                    "height": {
                      "band": 1
                    }
                  },
                  "encoding": {
                    "x": {
                      "field": "count",
                      "type": "quantitative",
                      "title": null,
                      "axis": null
                    },
                    "y": {
                      "field": "quality",
                      "type": "ordinal",
                      "title": "Map. Q.",
                      "scale": {
                        "paddingInner": 0.00,
                        "paddingOuter": 0
                      }
                    },
                    "color": {
                      "field": "effect",
                      "type": "nominal",
                      "sort": ["None", "Barely", "Positive", "Strong", "Very Strong"],
                      "scale": {
                          "domain": ["None", "Barely", "Positive", "Strong", "Very Strong"],
                          "range": ["#999999", "#2ba6cb", "#afdfee", "#ffa3a3", "#ff5555"]
                      },
                      "legend": null,
                    },
                    "tooltip": [{
                        "field": "quality",
                        "type": "nominative",
                        "title": "Mapping Quality"
                      }, {
                        "field": "effect",
                        "type": "nominative",
                        "title": "Effect"
                      }, {
                        "field": "count",
                        "type": "quantitative",
                        "title": "Count"
                      }]
                  },
                  "config": {
                    "view": {
                      "stroke": "transparent"
                    }
                  }
                }


    ?f"{group}-noncoding":
      desc: ?f"Variants in non-coding regions.\n{config['calling']['fdr-control']['events'][wildcards.event]['desc']}"
      dataset: ?f"{group}-noncoding"
      render-table:
        symbol:
          link-to-url: https://www.ensembl.org/Multi/Search/Results?q={feature}
        consequence:
          plot:
            heatmap:
              color-scheme: category20
              scale: ordinal
        impact:
          plot:
            heatmap:
              scale: ordinal
              domain:
                - HIGH
                - MODERATE
                - LOW
                - MODIFIER
              range:
                - "#ec0000"
                - "#ec5300"
                - "#ec9b00"
                - "#ecca00"

        ?for sample in ["normal", "tumor"]:
          ?f"{sample} observations":
            custom-plot:
              data: |
                function(value) {
                  var regex = /([0-9]+)(N|E|B|P|S|V|n|e|b|p|s|v)/g;
                  var effects = {
                    "N": "None",
                    "E": "Equal",
                    "B": "Barely",
                    "P": "Positive",
                    "S": "Strong",
                    "V": "Very Strong"
                  }
                  var observations = [];
                  while ((result = regex.exec(value)) != null) {
                    effect = effects[result[2].toUpperCase()]
                    count = parseFloat(result[1])
                    var quality = "Low";
                    if (result[2] == result[2].toUpperCase()) {
                        quality = "High";
                    }
                    observations.push({
                      "effect": effect,
                      "count": count,
                      "quality": quality
                    })
                  }
                  return observations
                }
              spec: |
                {
                  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
                  "mark": {
                    "type": "bar",
                    "height": {
                      "band": 1
                    }
                  },
                  "encoding": {
                    "x": {
                      "field": "count",
                      "type": "quantitative",
                      "title": null,
                      "axis": null
                    },
                    "y": {
                      "field": "quality",
                      "type": "ordinal",
                      "title": "Map. Q.",
                      "scale": {
                        "paddingInner": 0.00,
                        "paddingOuter": 0
                      }
                    },
                    "color": {
                      "field": "effect",
                      "type": "nominal",
                      "sort": ["None", "Barely", "Positive", "Strong", "Very Strong"],
                      "scale": {
                          "domain": ["None", "Barely", "Positive", "Strong", "Very Strong"],
                          "range": ["#999999", "#2ba6cb", "#afdfee", "#ffa3a3", "#ff5555"]
                      },
                      "legend": null
                    },
                    "tooltip": [{
                        "field": "quality",
                        "type": "nominative",
                        "title": "Mapping Quality"
                      }, {
                        "field": "effect",
                        "type": "nominative",
                        "title": "Effect"
                      }, {
                        "field": "count",
                        "type": "quantitative",
                        "title": "Count"
                      }]
                  },
                  "config": {
                    "view": {
                      "stroke": "transparent"
                    }
                  }
                }