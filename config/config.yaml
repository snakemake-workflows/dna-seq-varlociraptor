samples: config/samples.tsv

units: config/units.tsv

# Optional BED file with target regions
# target_regions: "path/to/taget-regions.bed"

ref:
  # Number of chromosomes to consider for calling.
  # The first n entries of the FASTA will be considered.
  n_chromosomes: 25
  # Ensembl species name
  species: homo_sapiens
  # Ensembl release
  release: 100
  # Genome build
  build: GRCh38

primers:
  trimming:
    activate: false
    # path to fasta files containg primer sequences
    primers_fa1: "path/to/primer-fa1"
    primers_fa2: "path/to/primer-fa2"
    # optional primer file allowing to define primers per sample
    # overwrites primers_fa1 and primers_fa2
    # the primer file has three fields: panel, fa1 and fa2 (optional)
    tsv: ""
    # Mean insert size between the outer primer ends.
    # If 0 or not set the bowtie default value of 250 will be used
    library_length: 0

# Estimation of tumor mutational burden.
mutational_burden:
  activate: false
  # Size of the sequenced coding genome for mutational burden estimation
  # Attention: when doing panel sequencing, set this to the
  # CAPTURED coding genome, not the entire one!
  coding_genome_size: 3e7
  # Plotting modes - hist (stratified histogram)
  # or curve (stratified curve)
  mode:
    - hist
    - curve
  # Events to use for mutational burden plotting.
  # In case you have certain samples where this differs, 
  # you can add an additional column mutational_burden_events
  # to the sample table (samples.tsv).
  # There events can be specified comma separated.
  events:
    - somatic_tumor_high
    - somatic_tumor_medium
    - somatic_tumor_low

# printing of variants in a matrix, sorted by recurrence
report:
  # if stratificatio is deactivated, one oncoprint for all
  # samples will be created.
  activate: true
  max_read_depth: 250
  stratify:
    activate: false
    # select a sample sheet column for stratification
    by-column: condition

# printing of variants in a table format
tables:
  activate: true
  # vembrane expression to generate the table
  output:
    expression: "INDEX, CHROM, POS, REF, ALT[0], ANN['Consequence'], ANN['IMPACT'], ANN['SYMBOL'], ANN['Feature']"
    genotype: true
    coverage: true
    event_prob: true
  generate_excel: true

calling:
  delly:
    activate: true
  freebayes:
    activate: true
  # See https://varlociraptor.github.io/docs/calling/#generic-variant-calling
  scenario: config/scenario.yaml
  filter:
    # Filter candidate variants (this filter helps to keep the number of evaluated candidates small).
    # It should ideally generate a superset of all other filters defined below.
    # Annotation of candidate variants tries to be as fast as possible, only using VEP
    # default parameters. Comment out or remove if not needed or intended.
    # See https://github.com/vembrane/vembrane
    candidates: "ANN['IMPACT'] != 'LOW'"
    # Add any number of named filters here (replace myfilter with a reasonable name, 
    # and add more below). Filtering happens with the vembrane filter language
    # (see https://github.com/vembrane/vembrane), and you can refer to any fields that
    # have been added by VEP during annotation (in the INFO/ANN field, see section 
    # annotations/vep below).
    # Filters will be applied independenty,
    # and can be referred in FDR control below to generate calls for different events.
    # You can also e.g. filter by ID or dbsnp annotations here.
    myfilter: "ANN['IMPACT'] == 'HIGH'"
  fdr-control:
    threshold: 0.05
    # denote whether local or global FDR shall be controlled
    local: true
    events: 
      # Add any number of events here to filter for.
      # The name of each event can be chosen freely 
      # ("somatic" below is just an example and can be modified as needed).
      somatic:
        varlociraptor: 
          # Add varlociraptor events to aggregated over.
          # The probability for the union of these events is used for controlling
          # the FDR.
          - somatic_tumor_high
          - somatic_tumor_medium
        filter: myfilter

# Will be ignored if calc_consensus_reads is activated
remove_duplicates:
  activate: true

# Experimental: calculate consensus reads from PCR duplicates
calc_consensus_reads:
  activate: false

annotations:
  vcfs:
    activate: true
    # annotate with known variants from ensembl
    known: resources/variation.vcf.gz
    # add more external VCFs as needed
    # cosmic: path/to/cosmic.vcf.gz
  dgidb:
    # annotate variants with drug interactions of affected genes
    activate: false
    # List of datasources for filtering dgidb entries
    # Available sources can be found on http://dgidb.org/api/v2/interaction_sources.json
    datasources:
      - DrugBank
  vep:
    # Consider removing --everything if VEP is slow for you (e.g. for WGS), 
    # and think carefully about which annotations you need.
    params: --everything
    plugins:
      # Add any plugin from https://www.ensembl.org/info/docs/tools/vep/script/vep_plugins.html
      # Plugin args can be passed as well, e.g. "LoFtool,path/to/custom/scores.txt".
      - LoFtool

params:
  cutadapt: ""
  picard:
    MarkDuplicates: "VALIDATION_STRINGENCY=LENIENT"
  gatk:
    BaseRecalibrator: ""
    applyBQSR: ""
  varlociraptor:
    # add extra arguments for varlociraptor call
    # For example, in case of panel data consider to omit certain bias estimations
    # which might be misleading because all reads of an amplicon have the sample start
    # position, strand etc. (--omit-strand-bias, --omit-read-position-bias, 
    # --omit-softclip-bias, --omit-read-orientation-bias).
    call: ""
    # Add extra arguments for varlociraptor preprocess. By default, we limit the depth to 200.
    # Increase this value for panel sequencing!
    preprocess: "--max-depth 200"
  freebayes:
    min_alternate_fraction: 0.05 # Reduce for calling variants with lower VAFs
